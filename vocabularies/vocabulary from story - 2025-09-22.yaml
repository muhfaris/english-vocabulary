- word: "refactoring"
  pronunciation: "/ˌriːˈfæktərɪŋ/"
  part_of_speech: "noun"
  meaning:
    english: "The process of restructuring existing computer code—changing the factoring—without changing its external behavior. Refactoring is intended to improve the design, structure, and/or implementation of the software, while preserving its functionality."
    bahasa: "Proses merestrukturisasi kode komputer yang ada—mengubah pemfaktoran—tanpa mengubah perilaku eksternalnya. Refactoring dimaksudkan untuk meningkatkan desain, struktur, dan/atau implementasi perangkat lunak, sambil mempertahankan fungsionalitasnya."
  usage: "Use 'refactoring' to describe the action or process of improving code internally. It's a common activity in software development to manage technical debt and improve maintainability."
  synonyms:
    - "restructuring"
    - "reorganizing"
    - "overhauling"
  examples:
    workplace:
      - "This week, my main focus is on refactoring the user authentication module."
      - "We have a dedicated sprint for refactoring and paying down technical debt."
    casual:
      - "I spent my weekend refactoring an old side project just for fun."
      - "Good refactoring can make a huge difference in how easy it is to add new features later."
  related:
    - word: "technical debt"
      difference: "'Technical debt' is the implied cost of rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer. 'Refactoring' is the action you take to 'pay back' that debt."
    - word: "code smell"
      difference: "A 'code smell' is a surface indication that usually corresponds to a deeper problem in the system. The process of 'refactoring' is often done to remove code smells."
  story: |
    Our application's performance had been slowly degrading. During a team meeting, we decided that a major refactoring of the data processing pipeline was necessary. It was a daunting task that would take weeks, but we knew it was essential. We started by identifying the key bottlenecks and planning the changes. The refactoring process was challenging, but as we progressed, we could see the improvements. The code became cleaner, more efficient, and much easier to work with. When we finally deployed the changes, the performance improvement was significant.
