name: Debug Auto-merge
on:
  pull_request:
    types: [opened, synchronize, labeled, ready_for_review]
  pull_request_review:
    types: [submitted]
permissions:
  contents: read
  pull-requests: read
jobs:
  debug-auto-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Debug auto-merge blocking reasons
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: "const { owner, repo } = context.repo;\nconst pr_number = context.payload.pull_request?.number || context.payload.pull_request_review?.pull_request?.number;\n\nif (!pr_number) {\n  console.log('❌ No PR number found');\n  return;\n}\n\nconsole.log(`🔍 Debugging auto-merge status for PR #${pr_number}`);\nconsole.log('=' * 60);\n\ntry {\n  // Get detailed PR information\n  const { data: pr } = await github.rest.pulls.get({\n    owner,\n    repo,\n    pull_number: pr_number\n  });\n  \n  console.log('📋 PR Basic Info:');\n  console.log(`  Title: ${pr.title}`);\n  console.log(`  State: ${pr.state}`);\n  console.log(`  Draft: ${pr.draft}`);\n  console.log(`  Mergeable: ${pr.mergeable}`);\n  console.log(`  Mergeable State: ${pr.mergeable_state}`);\n  console.log(`  Auto Merge: ${pr.auto_merge ? 'ENABLED' : 'DISABLED'}`);\n  console.log('');\n  \n  // Check labels\n  console.log('🏷️  Labels:');\n  const labels = pr.labels.map(label => label.name);\n  console.log(`  Labels: ${labels.join(', ') || 'None'}`);\n  console.log(`  Has auto-generated: ${labels.includes('auto-generated') ? '✅' : '❌'}`);\n  console.log('');\n  \n  // Get repository settings\n  const { data: repo_data } = await github.rest.repos.get({\n    owner,\n    repo\n  });\n  \n  console.log('⚙️  Repository Settings:');\n  console.log(`  Allow auto-merge: ${repo_data.allow_auto_merge ? '✅' : '❌'}`);\n  console.log(`  Allow squash merge: ${repo_data.allow_squash_merge ? '✅' : '❌'}`);\n  console.log('');\n  \n  // Get branch protection rules\n  try {\n    const { data: protection } = await github.rest.repos.getBranchProtection({\n      owner,\n      repo,\n      branch: pr.base.ref\n    });\n    \n    console.log('🛡️  Branch Protection Rules:');\n    console.log(`  Dismiss stale reviews: ${protection.required_pull_request_reviews?.dismiss_stale_reviews || false}`);\n    console.log(`  Required approving reviews: ${protection.required_pull_request_reviews?.required_approving_review_count || 0}`);\n    console.log(`  Require code owner reviews: ${protection.required_pull_request_reviews?.require_code_owner_reviews || false}`);\n    console.log(`  Required status checks: ${protection.required_status_checks?.contexts?.join(', ') || 'None'}`);\n    console.log(`  Strict status checks: ${protection.required_status_checks?.strict || false}`);\n    console.log('');\n  } catch (error) {\n    console.log('🛡️  Branch Protection: Not configured or no access');\n    console.log('');\n  }\n  \n  // Get reviews\n  const { data: reviews } = await github.rest.pulls.listReviews({\n    owner,\n    repo,\n    pull_number: pr_number\n  });\n  \n  const latestReviews = {};\n  reviews.forEach(review => {\n    latestReviews[review.user.login] = review;\n  });\n  \n  console.log('👥 Review Status:');\n  const approvals = Object.values(latestReviews).filter(r => r.state === 'APPROVED');\n  const changesRequested = Object.values(latestReviews).filter(r => r.state === 'CHANGES_REQUESTED');\n  const pending = Object.values(latestReviews).filter(r => r.state === 'COMMENTED');\n  \n  console.log(`  Approved by: ${approvals.map(r => r.user.login).join(', ') || 'None'} (${approvals.length} total)`);\n  console.log(`  Changes requested by: ${changesRequested.map(r => r.user.login).join(', ') || 'None'}`);\n  console.log(`  Pending reviews: ${pending.map(r => r.user.login).join(', ') || 'None'}`);\n  console.log('');\n  \n  // Get status checks\n  const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({\n    owner,\n    repo,\n    ref: pr.head.sha\n  });\n  \n  console.log('🧪 Status Checks (Combined):');\n  console.log(`  Overall state: ${statusChecks.state}`);\n  console.log(`  Total count: ${statusChecks.total_count}`);\n  \n  statusChecks.statuses.forEach(status => {\n    const icon = status.state === 'success' ? '✅' : \n                status.state === 'pending' ? '⏳' : \n                status.state === 'failure' ? '❌' : '❓';\n    console.log(`  ${icon} ${status.context}: ${status.state} - ${status.description}`);\n  });\n  console.log('');\n  \n  // Get check runs\n  const { data: checkRuns } = await github.rest.checks.listForRef({\n    owner,\n    repo,\n    ref: pr.head.sha\n  });\n  \n  console.log('🔬 Check Runs:');\n  console.log(`  Total check runs: ${checkRuns.total_count}`);\n  \n  checkRuns.check_runs.forEach(check => {\n    const icon = check.conclusion === 'success' ? '✅' : \n                check.conclusion === 'failure' ? '❌' : \n                check.status === 'in_progress' ? '⏳' : \n                check.status === 'queued' ? '⏸️' : '❓';\n    console.log(`  ${icon} ${check.name}: ${check.status}/${check.conclusion || 'null'}`);\n  });\n  console.log('');\n  \n  // Summary of potential blocking reasons\n  console.log('🚫 Potential Blocking Reasons:');\n  const blockingReasons = [];\n  \n  if (pr.draft) blockingReasons.push('PR is in draft mode');\n  if (pr.mergeable === false) blockingReasons.push('PR has merge conflicts');\n  if (!repo_data.allow_auto_merge) blockingReasons.push('Auto-merge not enabled in repository settings');\n  if (changesRequested.length > 0) blockingReasons.push(`Changes requested by: ${changesRequested.map(r => r.user.login).join(', ')}`);\n  if (statusChecks.state !== 'success') blockingReasons.push(`Status checks not all green: ${statusChecks.state}`);\n  if (!labels.includes('auto-generated')) blockingReasons.push('Missing auto-generated label');\n  \n  const failedChecks = checkRuns.check_runs.filter(c => c.conclusion === 'failure');\n  if (failedChecks.length > 0) {\n    blockingReasons.push(`Failed check runs: ${failedChecks.map(c => c.name).join(', ')}`);\n  }\n  \n  const pendingChecks = checkRuns.check_runs.filter(c => c.status === 'in_progress' || c.status === 'queued');\n  if (pendingChecks.length > 0) {\n    blockingReasons.push(`Pending check runs: ${pendingChecks.map(c => c.name).join(', ')}`);\n  }\n  \n  if (blockingReasons.length === 0) {\n    console.log('  🎉 No obvious blocking reasons found! Auto-merge should work.');\n  } else {\n    blockingReasons.forEach(reason => {\n      console.log(`  ❌ ${reason}`);\n    });\n  }\n  \n  console.log('');\n  console.log('💡 Recommendations:');\n  console.log('  1. Check repository settings: Settings → General → Allow auto-merge');\n  console.log('  2. Ensure all required status checks are configured correctly');\n  console.log('  3. Verify the PR has the auto-generated label');\n  console.log('  4. Make sure there are no merge conflicts');\n  console.log('  5. Check that required reviews are approved');\n  \n} catch (error) {\n  console.error('❌ Error debugging auto-merge:', error);\n}"
